{"version":3,"sources":["../../../../vue/qctt/build/dev-server.js"],"names":["require","config","process","env","NODE_ENV","JSON","parse","dev","opn","path","express","webpack","proxyMiddleware","webpackConfig","port","PORT","autoOpenBrowser","proxyTable","app","compiler","devMiddleware","publicPath","output","quiet","hotMiddleware","log","heartbeat","use","forEach","context","options","target","filter","staticPath","posix","join","assetsPublicPath","assetsSubDirectory","static","uri","_resolve","_reject","readyPromise","resolve","reject","server","portfinder","basePort","console","waitUntilValid","getPort","err","listen","module","exports","ready","close"],"mappings":"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","file":"dev-server.js","sourcesContent":["'use strict'\nrequire('./check-versions')()\n\nconst config = require('../config')\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n}\n\nconst opn = require('opn')\nconst path = require('path')\nconst express = require('express')\nconst webpack = require('webpack')\nconst proxyMiddleware = require('http-proxy-middleware')\nconst webpackConfig = require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\nconst port = process.env.PORT || config.dev.port\n// automatically open browser, if not set will be false\nconst autoOpenBrowser = !!config.dev.autoOpenBrowser\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\nconst proxyTable = config.dev.proxyTable\n\nconst app = express()\nconst compiler = webpack(webpackConfig)\n\nconst devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n\nconst hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: false,\n  heartbeat: 2000\n})\n// force page reload when html-webpack-plugin template changes\n// currently disabled until this is resolved:\n// https://github.com/jantimon/html-webpack-plugin/issues/680\n// compiler.plugin('compilation', function (compilation) {\n//   compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n//     hotMiddleware.publish({ action: 'reload' })\n//     cb()\n//   })\n// })\n\n// enable hot-reload and state-preserving\n// compilation error display\napp.use(hotMiddleware)\n\n// proxy api requests\nObject.keys(proxyTable).forEach(function (context) {\n  let options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n// handle fallback for HTML5 history API\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\napp.use(devMiddleware)\n\n// serve pure static assets\nconst staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\napp.use(staticPath, express.static('./static'))\n\nconst uri = 'http://localhost:' + port\n\nvar _resolve\nvar _reject\nvar readyPromise = new Promise((resolve, reject) => {\n  _resolve = resolve\n  _reject = reject\n})\n\nvar server\nvar portfinder = require('portfinder')\nportfinder.basePort = port\n\nconsole.log('> Starting dev server...')\ndevMiddleware.waitUntilValid(() => {\n  portfinder.getPort((err, port) => {\n    if (err) {\n      _reject(err)\n    }\n    process.env.PORT = port\n    var uri = 'http://localhost:' + port\n    console.log('> Listening at ' + uri + '\\n')\n    // when env is testing, don't need open it\n    if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {\n      opn(uri)\n    }\n    server = app.listen(port)\n    _resolve()\n  })\n})\n\nmodule.exports = {\n  ready: readyPromise,\n  close: () => {\n    server.close()\n  }\n}\n"]}